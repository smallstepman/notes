:PROPERTIES:
:ID:       057dfe09-997b-41ce-a981-9859c0201dc6
:END:
#+title: concurrent programming
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| model                  | benefits                                                     | drawback                                                    |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| OS threads             | easy to express because they don't require any changes to the| synchronizing between threads can be difficult              |
|                        |programming model.                                            |                                                             |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
|                        |                                                              | performance overhead is large - thread pools can mitigate   |
|                        |                                                              |some of these costs, but not enough to support massive       |
|                        |                                                              |IO-bound workloads.                                          |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| Event-driven           | in conjunction with callbacks, can be very performant,       | tends to result in a verbose, "non-linear" control flow.    |
|programming             |                                                              |                                                             |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
|                        |                                                              | Data flow and error propagation is often hard to follow.    |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| Coroutines             | don't require changes to the programming model, which makes  | they abstract away low-level details that are important for |
|                        |them easy to use                                              |systems programming and custom runtime implementors          |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
|                        | can also support a large number of tasks                     |                                                             |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| The actor model        | divides all concurrent computation into units called actors, | leaves many practical issues unanswered, such as flow       |
|                        |which communicate through fallible message passing            |control and retry logic                                      |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
|                        | can be efficiently implemented                               |                                                             |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
| async                  | sync provides significantly reduced CPU and memory overhead, | However, async Rust results in larger binary blobs due to   |
|                        |especially for workloads with a large amount of IO-bound      |the state machines generated from async functions and since  |
|                        |tasks, such as servers and databases.                         |each executable bundles an async runtime.                    |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
|                        | you can have orders of magnitude more tasks than OS threads, |                                                             |
|                        |because an async runtime uses a small amount of (expensive)   |                                                             |
|                        |threads to handle a large amount of (cheap) tasks             |                                                             |
+------------------------+--------------------------------------------------------------+-------------------------------------------------------------+
