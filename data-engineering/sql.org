:PROPERTIES:
:ID:       b4c415a9-5ee4-4927-b25b-f140193b60a5
:ROAM_REFS: https://stackoverflow.com/questions/14588304/composite-primary-key-vs-additional-id-column
:END:
#+TITLE: SQL
#+created_at:<2021-04-05 Mon 02:14>

* textual search operators
- have existed in databases for years
- PostgreSQL has ~, ~*, LIKE, and ILIKE operators for textual data types, but they lack many essential properties required by modern information systems:
  - There is no linguistic support, even for English
  - regular expressions are not sufficient because they cannot easily handle derived words, e.g., satisfies and satisfy
  - might miss documents that contain satisfies, although you probably would like to find them when searching for satisfy
  - it is possible to use OR to search for multiple derived forms, but this is tedious and error-prone (some words can have several thousand derivatives)
- they provide no ordering (ranking) of search results, which makes them ineffective when thousands of matching documents are found.
- tend to be slow because there is no index support, so they must process all documents for every search.

* storing preprocessed documents optimized for searching
- tokens are raw fragments of the document text, while lexemes are words that are believed useful for indexing and searching
- each document can be represented as a sorted array of normalized lexemes
- along with the lexemes it is often desirable to store positional information to use for proximity ranking, so that a document that contains a more “dense” region of query words is assigned a higher rank than one with scattered query words
- this allows searches to find variant forms of the same word, without tediously entering all the possible variants
- this step typically eliminates stop words, which are words that are so common that they are useless for searching
- PostgreSQL uses dictionaries to perform this step
  - various standard dictionaries are provided
  - custom ones can be created for specific needs

* primary key - id vs tuple of columns
- id is a superkey - uniquely identifies a tuple (row).
- id is irreducible - removing any of the columns does not make it a key any more.
- id is a candidate key - an irreducible superkey is a candidate key.

* Questions
** referencing table and the products table is the referenced table
