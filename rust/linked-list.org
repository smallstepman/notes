:PROPERTIES:
:ID:       0d061b3f-f871-4c7c-814d-472f4995c7a6
:ROAM_REFS: https://rust-unofficial.github.io/too-many-lists
:END:
#+title: Rust linked list

* challenges when implementing linked list in Rust
- dealing with recursive type
  - when list =A -> B -> C= gets dropped, it will try to drop A, which will try to drop B, which will try to drop C - a recursive code which can blow the stack
  - dropping list with Rc/Arc. How can we know we can drop a node, how can we know if reference to this particular node hasn't been cloned into another list? (solved with =Arc::try_unwrap=)
- =move out of borrowed content=
  - when pushing new values, its required to get the ownership of the head of the list, without Rust noticing that it's gone, to then steal a value out of a borrow by replacing it with another value (solved with =std::mem::replace=)
  - when popping value off the list, its required to remove things, by getting the head of the list by value, which is tricky because moving out of node is hard when all we have is a shared reference to it (solved with =std::mem::replace=)
  - when peeking, we need to do is return a reference to the element in the head of the list, but we need to do it without moving the value (solved with =as_ref= & =as_mut=)
- lifetimes during iteration
* singly-linked list
** implementation using =Box=
:PROPERTIES:
:ID:       3fe77601-5867-4560-8981-3a296f2c6b7a
:ROAM_REFS: https://rust-unofficial.github.io/too-many-lists/first-layout.html
:END:
#+begin_src rust :exports both
#[derive(Debug)]
enum List {
    Elem(i32, Box<List>),
    Empty,
}

fn main() {
    let list: List = List::Elem(1, Box::new(List::Elem(2, Box::new(List::Empty))));
    println!("{:?}", list);
}
#+end_src

#+RESULTS:
: Elem(1, Elem(2, Empty))
*** features
- compiles
- the layout takes advantage of the [[id:1578850d-d7d8-4f9c-8aa4-18fca46ff5c2][null pointer optimization]]
*** issues
- allocating a node that just says "I'm not actually a Node"
- non-uniform node layout
  - first node is stack-allocated, while the rest of (non-empty) nodes is heap-allocated, which has an impact on splitting and merging lists
  - when splitting, new head (start) of the list will have to be downcasted from pointer to value on the heap, into value on the stack, which effectively means copying a value
- even though =Empty= is a single bit of information, it necessarily consumes enough space for a pointer and an element, because it has to be ready to become an =Elem= at any time
*** fixing issues, implementing methods, writing tests
#+begin_src rust :exports both :tangle "main.rs"
#![allow(dead_code)]
#[derive(Debug)]
pub struct List<T> {
    head: Link<T>,
}

type Link<T> = Option<Box<Node<T>>>;

#[derive(Debug)]
struct Node<T> {
    elem: T,
    next: Link<T>,
}

impl<T> List<T> {
    fn new() -> Self {
        List { head: Link::None }
    }
    fn push(&mut self, elem: T) {
        let new_node = Box::new(Node {
            elem,
            next: self.head.take(),
        });
        self.head = Link::Some(new_node);
    }
    fn pop(&mut self) -> Option<T> {
        self.head.take().map(|node| {
            self.head = node.next;
            node.elem
        })
    }
    fn peek(&self) -> Option<&T> {
        self.head.as_ref().map(|node| &node.elem)
    }
    fn peek_mut(&mut self) -> Option<&mut T> {
        self.head.as_mut().map(|node| &mut node.elem)
    }
    fn into_iter(self) -> IntoIter<T> {
        IntoIter(self)
    }
    fn iter(&self) -> Iter<T> {
        Iter { next: self.head.as_deref() }
    }
    fn iter_mut(&mut self) -> IterMut<'_, T> {
        IterMut { next: self.head.as_deref_mut() }
    }
}

struct IntoIter<T>(List<T>);

impl<T> Iterator for IntoIter<T> {
    type Item = T;
    fn next(&mut self) -> Option<Self::Item> {
        self.0.pop()
    }
}

struct Iter<'a, T> {
    next: Option<&'a Node<T>>,
}

impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;
    fn next(&mut self) -> Option<Self::Item> {
        self.next.map(|node| {
            self.next = node.next.as_deref();
            // same as
            // self.next = node.next.as_ref().map::<&Node<T>, _>(|node| &node);
            &node.elem
        })
    }
}

struct IterMut<'a, T> {
    next: Option<&'a mut Node<T>>,
}

impl<'a, T> Iterator for IterMut<'a, T> {
    type Item = &'a mut T;
    fn next(&mut self) -> Option<Self::Item> {
        self.next.take().map(|node| {
            self.next = node.next.as_deref_mut();
            // self.next = node.next.as_ref().map::<&Node<T>, _>(|node| &node);
            &mut node.elem
        })
    }
}

impl<T> Drop for List<T> {
    fn drop(&mut self) {
        let mut cur_link = self.head.take();
        while let Link::Some(mut boxed_node) = cur_link {
            cur_link = boxed_node.next.take();
        }
    }
}

fn main() {
    let mut list = List::new();
    println!("{:?}", list);
    list.push(83);
    list.push(3);
    println!("{:?}", list);
    list.pop();
    println!("{:?}", list);
    test_iter();
    test_iter_mut();
}


// #[test]
fn test_iter() {
    let mut list = List::new();
    list.push(1); list.push(2); list.push(3);

    let mut iter = list.iter();
    assert_eq!(iter.next(), Some(&3));
    assert_eq!(iter.next(), Some(&2));
    assert_eq!(iter.next(), Some(&1));
}
// #[test]
fn test_iter_mut() {
    let mut list = List::new();
    list.push(1); list.push(2); list.push(3);

    let mut iter = list.iter_mut();
    assert_eq!(iter.next(), Some(&mut 3));
    assert_eq!(iter.next(), Some(&mut 2));
    assert_eq!(iter.next(), Some(&mut 1));
}
#+end_src

#+RESULTS:
: List { head: None }
: List { head: Some(Node { elem: 3, next: Some(Node { elem: 83, next: None }) }) }
: List { head: Some(Node { elem: 83, next: None }) }

** implementation using =Arc=
:PROPERTIES:
:ID:       e8d2e004-9dd1-4203-bc88-55997a5f6265
:ROAM_REFS: https://rust-unofficial.github.io/too-many-lists/third.html
:END:
looks exactly the same for =Rc= (just replace "Arc" with "Rc")
#+begin_src rust
#![allow(dead_code)]
use std::sync::Arc;

#[derive(Debug)]
struct List<T> {
    head: Link<T>
}

type Link<T> = Option<Arc<Node<T>>>;

#[derive(Debug)]
struct Node<T> {
    elem: T,
    next: Link<T>
}

impl<T> List<T> {
    fn new() -> Self {
        List { head: None }
    }
    fn prepend(&self, elem: T) -> List<T> {
        List {
            head: Some(Arc::new(Node {
                elem,
                next: self.head.clone()
            }))
        }
    }
    fn tail(&self) -> List<T> {
        List {
            head: self.head.as_ref().and_then(|node| node.next.clone())
        }
    }
}

fn main() {
    let list = List::new();
    let list = list.prepend(3);
    let list = list.prepend(6);
    println!("{:?}", list);
    let list = list.tail();
    println!("{:?}", list);
}
#+end_src

#+RESULTS:
: List { head: Some(Node { elem: 6, next: Some(Node { elem: 3, next: None }) }) }
: List { head: Some(Node { elem: 3, next: None }) }

*** features
- peristent list
- when creating copies of the list, all copies point to the same data
  #+begin_src
  list1 = A -> B -> C -> D
  list2 = tail(list1) = B -> C -> D
  list3 = push(list2, X) = X -> B -> C -> D

  list1 -> A ---+
                |
                v
  list2 ------> B -> C -> D
                ^
                |
  list3 -> X ---+
  #+end_src
*** issues
- we can't mutate data inside Arc/Rc smart pointers
** implementation using raw pointers
* deque
** features
- allows for mutating data using [[id:65e8df06-496f-471e-b581-509c4433de87][interior mutability]] pattern

* comment insights
** implementation with associated types
#+begin_src rust
impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;

    fn next(&mut self) -> Option<Self::Item> { /* stuff */ }
}
// Which can be desugared to:
impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;

    fn next<'b>(&'b mut self) -> Option<&'a T> { /* stuff */ }
}
#+end_src
