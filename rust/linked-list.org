:PROPERTIES:
:ID:       0d061b3f-f871-4c7c-814d-472f4995c7a6
:ROAM_REFS: https://rust-unofficial.github.io/too-many-lists
:END:
#+title: Rust linked list

* trivial implementation with =Box=
:PROPERTIES:
:ID:       3fe77601-5867-4560-8981-3a296f2c6b7a
:ROAM_REFS: https://rust-unofficial.github.io/too-many-lists/first-layout.html
:END:
#+begin_src rust :exports both
#[derive(Debug)]
enum List {
    Elem(i32, Box<List>),
    Empty,
}

fn main() {
    let list: List = List::Elem(1, Box::new(List::Elem(2, Box::new(List::Empty))));
    println!("{:?}", list);
layout took advantage of the null pointer optimization}
#+end_src

#+RESULTS:
: Elem(1, Elem(2, Empty))
** features
- compiles
- the layout takes advantage of the [[id:1578850d-d7d8-4f9c-8aa4-18fca46ff5c2][null pointer optimization]]
** issues
- allocating a node that just says "I'm not actually a Node"
- non-uniform node layout
  - first node is stack-allocated, while the rest of (non-empty) nodes is heap-allocated, which has an impact on splitting and merging lists
  - when splitting, new head (start) of the list will have to be downcasted from pointer to value on the heap, into value on the stack, which effectively means copying a value
- even though =Empty= is a single bit of information, it necessarily consumes enough space for a pointer and an element, because it has to be ready to become an =Elem= at any time
** fixing issues, implementing methods, writing tests
#+begin_src rust :exports both :tangle "main.rs"
#![allow(dead_code)]
#[derive(Debug)]
pub struct List<T> {
    head: Link<T>,
}

type Link<T> = Option<Box<Node<T>>>;

#[derive(Debug)]
struct Node<T> {
    elem: T,
    next: Link<T>,
}

impl<T> List<T> {
    fn new() -> Self {
        List { head: Link::None }
    }
    fn push(&mut self, elem: T) {
        let new_node = Box::new(Node {
            elem,
            next: self.head.take(),
        });
        self.head = Link::Some(new_node);
    }
    fn pop(&mut self) -> Option<T> {
        self.head.take().map(|node| {
            self.head = node.next;
            node.elem
        })
    }
    fn peek(&self) -> Option<&T> {
        self.head.as_ref().map(|node| &node.elem)
    }
    fn peek_mut(&mut self) -> Option<&mut T> {
        self.head.as_mut().map(|node| &mut node.elem)
    }
    fn into_iter(self) -> IntoIter<T> {
        IntoIter(self)
    }
    fn iter(&self) -> Iter<T> {
        Iter { next: self.head.as_deref() }
    }
    fn iter_mut(&mut self) -> IterMut<'_, T> {
        IterMut { next: self.head.as_deref_mut() }
    }
}

struct IntoIter<T>(List<T>);

impl<T> Iterator for IntoIter<T> {
    type Item = T;
    fn next(&mut self) -> Option<Self::Item> {
        self.0.pop()
    }
}

struct Iter<'a, T> {
    next: Option<&'a Node<T>>,
}

impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;
    fn next(&mut self) -> Option<Self::Item> {
        self.next.map(|node| {
            self.next = node.next.as_deref();
            // same as
            // self.next = node.next.as_ref().map::<&Node<T>, _>(|node| &node);
            &node.elem
        })
    }
}

struct IterMut<'a, T> {
    next: Option<&'a mut Node<T>>,
}

impl<'a, T> Iterator for IterMut<'a, T> {
    type Item = &'a mut T;
    fn next(&mut self) -> Option<Self::Item> {
        self.next.take().map(|node| {
            self.next = node.next.as_deref_mut();
            // self.next = node.next.as_ref().map::<&Node<T>, _>(|node| &node);
            &mut node.elem
        })
    }
}

impl<T> Drop for List<T> {
    fn drop(&mut self) {
        let mut cur_link = self.head.take();
        while let Link::Some(mut boxed_node) = cur_link {
            cur_link = boxed_node.next.take();
        }
    }
}

fn main() {
    let mut list = List::new();
    println!("{:?}", list);
    list.push(83);
    list.push(3);
    println!("{:?}", list);
    list.pop();
    println!("{:?}", list);
    test_iter();
    test_iter_mut();
}


// #[test]
fn test_iter() {
    let mut list = List::new();
    list.push(1); list.push(2); list.push(3);

    let mut iter = list.iter();
    assert_eq!(iter.next(), Some(&3));
    assert_eq!(iter.next(), Some(&2));
    assert_eq!(iter.next(), Some(&1));
}
// #[test]
fn test_iter_mut() {
    let mut list = List::new();
    list.push(1); list.push(2); list.push(3);

    let mut iter = list.iter_mut();
    assert_eq!(iter.next(), Some(&mut 3));
    assert_eq!(iter.next(), Some(&mut 2));
    assert_eq!(iter.next(), Some(&mut 1));
}
#+end_src

#+RESULTS:
: List { head: None }
: List { head: Some(Node { elem: 3, next: Some(Node { elem: 83, next: None }) }) }
: List { head: Some(Node { elem: 83, next: None }) }


* =.as_ref()=
The correct way to handle this is with the as_ref method on Option, which has the following definition:
#+begin_src rust
impl<T> Option<T> {
    pub fn as_ref(&self) -> Option<&T>;
}
#+end_src
It demotes the Option to an Option to a reference to its internals. We could do this ourselves with an explicit match but ugh no. It does mean that we need to do an extra dereference to cut through the extra indirection, but thankfully the . operator handles that for us.
#+begin_src rust
pub fn peek(&self) -> Option<&T> {
    self.head.as_ref().map(|node| {
        &node.elem
    })
}
#+end_src
* insights
** implementation with associated types
#+begin_src rust
impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;

    fn next(&mut self) -> Option<Self::Item> { /* stuff */ }
}
// Which can be desugared to:
impl<'a, T> Iterator for Iter<'a, T> {
    type Item = &'a T;

    fn next<'b>(&'b mut self) -> Option<&'a T> { /* stuff */ }
}
#+end_src
