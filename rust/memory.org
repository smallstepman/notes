:PROPERTIES:
:ID:       5ca74f75-5cb2-44db-ba36-d1429b764976
:END:
#+title: Rust memory model
#+filetags: rust

* value
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452842
:ID:       38648403-54c3-4904-bd0d-8c3207ef1f30
:END:
- combination of a type and an element of that type’s domain of values
- can be turned into a sequence of bytes using its type’s representation
- it’s meaning is independent of the location where those bytes are stored
- is stored in a place; this place can be on the stack, on the heap, or other
* variable
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452837
:ID:       5dc6cb1c-bccf-4c53-ae8e-34d844af416f
:END:
- [[https://doc.rust-lang.org/reference/variables.html][reference]]
- the most common place to store a value
- named value slot on the stack
- when assigned, the slot is filled, and its old value (if it had one) is dropped and replaced
- when accessed, the compiler checks that the slot isn’t empty, as that would mean the variable is uninitialized or its value has been moved
- a pointer to a variable refers to the variable’s backing memory and can be dereferenced to  get at its value
- if multiple variables are declared with the same name, they still end up with different chunks of memory backing them
** const
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452833
:ID:       ddf46b82-db54-4a2b-9cfb-7064164228da
:END:
constant items can be completely computed at compile time, and any code that refers to them is replaced with the constant’s computed value during compilation. A constant has no memory or other storage associated with it (it is not a place).
* pointer
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452829
:ID:       c1d39c88-da7d-4f1b-9cae-34c3dc5f4c2f
:END:
- value that holds the address of a region of memory (the pointer points to a place)
- can be dereferenced to access the value stored in the memory location it points to
- can store the same pointer in more than one variable and therefore have multiple variables that indirectly refer to the same location in memory and thus the same underlying value
- dereferencing a pointer is consiered unsafe, because pointers have no lifetime (as opposed to a reference), therefore the compiler cannot check if the pointer is valid to use
* items
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452824
:ID:       bf077a13-933e-4dbe-990c-b4a513059238
:END:
- items of a program are those functions, modules, and types that have their value calculated at compile-time
- stored uniquely in the memory image of the rust process
- not dynamically allocated
- not freed
* regions
** stack
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452818
:ID:       6bd81b97-d697-448e-ac04-1d245027c40f
:END:
- a segment of memory that the program uses as scratch space for function calls
- each time a function is called, a contiguous chunk of memory called a [[id:b1026cb9-a5e5-41c7-ba7b-b36084a864ad][frame]] is allocated at the top of the stack
- near the bottom of the stack is the frame for the main function, and as functions call other functions, additional frames are pushed onto the stack
- function’s frame contains all the variables within that function, along with any arguments the function takes
- when the function returns, its stack frame is reclaimed
  - the bytes that make up the values of the function’s local variables are not immediately wiped, but it’s not safe to access them as they may have been overwritten by a subsequent function call whose frame overlaps with the reclaimed one, and even if they haven’t been overwritten, they may contain values that are illegal to use, such as ones that were moved when the function returned
  - stack frames, and crucially the fact that they eventually disappear, are very closely tied to the notion of lifetimes in Rust - any variable stored in a frame on the stack cannot be accessed after that frame goes away, so any  reference to it must have a lifetime that is at most as long as the lifetime of the frame
- if that value is the function’s return value, the calling function can leave some space on its stack for the called function to write that value into before it returns
*** sharing stack between threads
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452809
:END:
An executing Rust program consists of a collection of native OS threads, each with their own stack and local state. To share stacks between threads we can use following crates:
- [[https://stackoverflow.com/questions/32750829/how-can-i-pass-a-reference-to-a-stack-variable-to-a-thread][StackOverflow question]]
- [[https://docs.rs/crossbeam/0.8.1/crossbeam/fn.scope.html][crossbeam - scoped threads]]
- [[https://crates.io/crates/rayon][rayon - work-stealing]]
** heap
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452800
:ID:       43faddc6-b695-4dc6-bbaa-096f705b41e9
:END:
- a pool of memory that isn’t tied to the current call stack of the program
- values in heap memory live until they are explicitly deallocated, i.e. can live beyond the lifetime of the current function’s frame
- storing value on the heap allows to send the value to a different thread
- the heap allows to explicitly allocate contiguous segments of memory
  - you get a pointer to the start of that segment of memory
  - that memory segment is reserved for you until you later deallocate it (freeing)
- the primary mechanism for interacting with the heap in Rust is the =Box= type
  - when rust invokes =Box::new(value)=, the value is placed on the heap, and returns back the =Box<T>= - a pointer to that value on the heap
  - when the Box is eventually dropped, that memory is freed
  - if you forget to deallocate heap memory, it will stick around forever, and your application will eventually eat up all the memory on your machine - this is called leaking memory and is usually something you want to avoid
    - there are some cases where you explicitly want to leak memory. For example, say you have a read-only configuration that the entire program should be able to access. You can allocate that on the heap and explicitly leak it with Box::leak to get a 'static reference to it.
*** static memory
- lifetime of an allocation in the heap depends on the lifetime of the box values pointing to it
- box values may themselves be passed in and out of frames, or stored in the heap
- heap allocations may outlive the frame they are allocated within
- allocation in the heap is guaranteed to reside at a single location in the heap for the whole lifetime of the allocation - it will never be relocated as a result of moving a box value
** static memory
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452790
:ID:       7bfb76c4-d745-4bd9-8413-5e20b90ad684
:END:
- holds:
  - program’s static memory contains the program’s binary code, which is usually mapped as read-only; as the program executes, it walks through the binary code in the text segment instruction by instruction and jumps around whenever a function is called
  - memory for variables declared with the =static= keyword, as well as certain constant values in your code (e.g. strings)
- automatically loaded into program’s memory when that program is executed
- values in static memory live for the entire execution of the program (not deallocated until the program shuts down)
- the special lifetime ='static= (which gets its name from the static memory region) marks a reference as being valid for “as long as static memory is  around,” which is until the program shuts down
  - there can be ='static= references that do not point to static memory
- a bound like =T: 'static= indicates that the type parameter T is able to live for however long we keep it around for, up to and including the remaining execution of the program
  - this bound requires that T is owned and self-sufficient, either in that it does not borrow other (non-static) values or that anything it does borrow is also 'static and thus will stick around until the end of the program.
- example of ='static= as a bound is the =std::thread::spawn= function that creates a new thread, which requires that the closure you pass it is 'static
  - the new thread cannot refer to anything stored on the old thread’s stack, since the new thread may outlive the current thread
  - the new thread can refer only to values that will live for its entire lifetime
* ownership
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452781
:ID:       58db83d3-d541-4f05-a6dc-b2e98b95b888
:END:
- ownership model addresses:
  - keeping track of what parts of code are using what data on the heap
  - minimizing the amount of duplicate data on the heap
  - cleaning up unused data on the heap so the system doesn't run out of  memory

* rules of ownership
:PROPERTIES:
:ID:       b6b4cd2e-267f-46b1-b09a-21b4250fbbe0
:END:
- each value in Rust has a variable that's called its *owner*
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.
- =borrowiwng= is having references as function parameters. I can
  =borrow= mutably or immutably
- The variable is valid from the point at which it's declared until the
  end of the current scope
- Values allocated on heap have to request memory from OS at runtime, when their scope is about to finish, Rust calls =drop= automatically.
* Examples
- these values will be *copied*, because =i32= is stored on stack
#+begin_src rust
let x = 5;
let y = x;
#+end_src

- these values will be *moved*, because =String= is stored on heap
#+begin_src rust
let s1 = String::from("hello");
let s2 = s1;
#+end_src

  [[notes_assets/moving_values_stored_on_heap.svg]]

- these values (which are store on the heap) will be *copied*, because
  we use =clone= method

#+begin_src rust
let s1 = String::from("hello");
let s2 = s1.clone();
#+end_src

  [[notes_assets/coping_values_stored_on_heap.svg]]

- types which implements =Copy= trait: integers, booleans, floats,
  chars, tuples containing these types.

- ownership and functions without returns

#+begin_src rust
fn main() {
  let s = String::from("hello");  // s comes into scope
  takes_ownership(s);             // s's value moves into the function and so is no longer valid here
  let x = 5;                      // x comes into scope
  makes_copy(x);                  // x would move into the function, but i32 is Copy, so it’s okay to still use x afterward
  println!("{}", x);
  // error: value borrowed here after move
  // println!("{}", s);
} // Here, x goes out of scope, then s. But because s's value was moved, nothing special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
#+end_src

- ownership and function with return values

#+begin_src rust
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its value into s1
    let s2 = String::from("hello");     // s2 comes into scope
    let s3 = takes_and_gives_back(s2);  // s2 is moved takes_and_gives_back, which also moves its return value into s3
    let s4 = String::from("hello");
    let (s5, v) = calculate_length(s4);
    println!("The length of '{}' is {}.", s2, len);
    println!("{} {}", s1, s3);
    // error: value borrowed here after move
    // println!("{}", s2);
}

fn gives_ownership() -> String {  // gives_ownership will move return value into the function that calls it
    let some_string = String::from("hello"); // some_string comes into scope
    some_string    // some_string is returned and moves out to the calling function
}

// takes_and_gives_back will take a String and return one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes scope
    a_string  // a_string is returned and moves out to the calling functiodispan
}

fn calculate_length(s: String) -> (String, usize) {
  let length = s.len();
  (s, length)
}
#+end_src

- all values have a single owner (that is, exactly one location (usually a scope) is responsible for ultimately deallocating each value)
- is enforced through the borrow checker
- value can be moved by e.g.:
  - assigning it to a new variable
  - pushing it to a vector
  - placing it on the heap
- if the value is moved, the ownership of the value moves from the old location to the new one, and permits access of values from old location (even tho the values are still there)
  - an exception from above rule are values which type implements the special Copy trait - the value is not considered to have moved even if it is reassigned to a new memory location, instead, the value is copied, and both the old and new locations remain accessible. To be Copy, it must be possible to duplicate the type’s values simply by copying their bits. This eliminates all types that contain non-Copy types as well as any type that owns a resource it must deallocate when the value is dropped
- when a value’s owner no longer has use for it, it is the owner’s responsibility to do any necessary cleanup for that value by dropping it.
  - dropping happens automatically when the variable that holds the value is no longer in scope
  - types usually recursively drop values they contain, so dropping a variable of a complex type may result in many values being dropped
  - a variable that holds a reference to another value does not own that other value, so the value isn’t dropped when the variable drops
  - variables (including function arguments) are dropped in reverse order
  - nested values are dropped in source-code order

* borrowing
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452776
:ID:       89a2bb9b-b52a-456f-a026-d019f1cc9f44
:END:
- references serve as a mechanism which allows the owner of a value to lend out that value to others, without giving up ownership
- references are pointers that come with an additional contract for how they can be used, such as:
  - whether the reference provides exclusive access to the referenced value
  - whether the referenced value may also have other references point to it

** shared references
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452772
:ID:       19a0b4ee-5712-4259-964a-0c6b4721117c
:END:
- values behind shared references are not mutable
- a shared reference, &T, is, as the name implies, a pointer that may be shared
- any number of other references may exist to the same value, and each shared reference is Copy, so you can trivially make more of them
- its not possible to modify or reassign the value a shared reference points to
- its not possible to cast a shared reference to a mutable one
- compiler is allowed to assume that the value a shared reference points to will not change while that reference lives
- if compiler sees that the value behind a shared reference is read multiple times in a function, it is within its rights to read it only once and reuse that value
  - whether or not the compiler chooses to apply a given optimization is more or less irrelevant. The compiler heuristics change over time, so you generally want to code against what the compiler is allowed to do rather than what it actually does in a particular case at a particular moment in time.

** mutable references
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452768
:END:
- the alternative to a shared reference is a mutable reference: &mut T. With mutable references, the Rust compiler is again allowed to make full use of the contract that the reference comes with: the compiler assumes that there are no other threads accessing the target value, whether through a shared reference or a mutable one.
- in other words, it assumes that the mutable reference is exclusive.
- a mutable reference lets you mutate only the memory location that the reference points to. Whether you can mutate values that lie beyond the immediate reference depends on the methods provided by the type that lies between
- the primary difference between owning a value and having a mutable reference to it is that the owner is responsible for dropping the value when it is no longer necessary
- if the value sitting behind mutable reference is moved, then another value must be left in its place (otherwise, the owner would still think it needed to drop the value, but there would be no value for it to drop!)

** interior mutability
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452763
:END:
- Some types provide interior mutability, meaning they allow you to mutate a value through a shared reference.
- These types usually rely on additional mechanisms (like atomic CPU instructions) or invariants to provide safe mutability without relying on the semantics of exclusive references
- These normally fall into two categories: those that let you get a mutable reference through a shared reference, and those that let you replace a value given only a shared referece.

*** Mutex, RefCell, UnsafeCell
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452758
:END:
- types like Mutex and RefCell, contain safety mechanisms to ensure that, for any value they give a mutable reference to, only one mutable reference (and no shared references) can exist at a time
- under the hood, these types (and those like them) all rely on a type called UnsafeCell

*** Atomic, Cell
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452753
:END:
- types which provide methods for manipulating that value in place
- types do not give out a mutable reference to the inner value
- e.g. its not possible to get a reference directly to the usize or i32 behind such a type, but it is possible to read and replace its value at a given point in time
**** std::cell::Cell
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452747
:END:
an interesting example of safe interior mutability through invariants:
- it is not shareable across threads and never gives out a reference to the value contained in the Cell
- the methods all either replace the value entirely or return a copy of the contained value
- since no references can exist to the inner value, it is always okay to move it
- since Cell isn’t shareable across threads, the inner value will never be concurrently mutated even though mutation happens through a shared reference
* lifetimes
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452741
:ID:       f1405377-b328-44c5-a16e-bff6e7ba594e
:END:
- is a name for a region of code that some reference must be valid for
- oversimplistic explanation: a lifetime begins when you take a reference to some variable and ends when that variable is moved or goes out of scope
- when a reference with some lifetime 'a is used, the borrow checker checks that 'a is still alive
  - it does this by tracing the path back to where 'a starts—where the reference was taken—from the point of use and checking that there are no conflicting uses along that path.
  - this ensures that the reference still points to a value that it is safe to access.
- anonymous lifetime syntax ='_=
  - "lifetime inference"
  - useful when there is only one lifetime to guess
    - e.g. a function accepts a reference and returns the reference, however they both share same lifetime
      #+begin_src rust
      fn example(a: &str) -> &'_ str { ... }
      #+end_src
    - e.g. a function accepts two references, and returns one
      #+begin_src rust
      fn example(a: &str, b: &'_ str) -> &'_ str { ... }
      #+end_src
      which means: =b= has unique arbitrary lifetime, and return type gets turned into lifetime inference, therefore the compiler infers the return type lifetime must be tied to a lifetime of =a=
  - signals to the compiler, that it should guess the lifetime
** lifetimes

- CH1504: We could change the definition of Cons to hold references
      instead, but then we would have to specify lifetime parameters. By
      specifying lifetime parameters, we would be specifying that every
      element in the list will live at least as long as the entire list.
      The borrow checker wouldn't let us compile let a = Cons(10, &Nil);
      for example, because the temporary Nil value would be dropped before
      a could take a reference to it.

- why first works (with one lifetime specifier), but second doesn't (it reflects lifetimes closely)

      #+begin_src rust
        fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
            if x.len() > y.len() {
                x
            } else {
                y
            }
        }

        fn main() {
            let q = String::from("popopop asd");

            {
                let result;
                let w = String::from("asdasd");
                result = longest(q.as_str(), w.as_str());
                println!("{}", result);
            }
        }
      #+end_src

#+begin_src rust
fn longest<'a,'b>(x: &'a str, y: &'b str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let q = String::from("popopop asd");

    {
        let result;
        let w = String::from("asdasd");
        result = longest(q.as_str(), w.as_str());
        println!("{}", result);
    }
}
#+end_src
- (from tokio tutorial) Note that the error message talks about the argument type outliving the 'static lifetime. This terminology can be rather confusing because the 'static lifetime lasts until the end of the program, so if it outlives it, don't you have a memory leak? The explanation is that it is the type, not the value that must outlive the 'static lifetime, and the value may be destroyed before its type is no longer valid. When we say that a value is 'static, all that means is that it would not be incorrect to keep that value around forever. This is important because the compiler is unable to reason about how long a newly spawned task stays around, so the only way it can be sure that the task doesn't live too long is to make sure it may live forever.
** generic lifetimes
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452734
:END:
- rust allows to make a type definition generic over one or more lifetimes, this allows ... :
  - store references within your own types - those references need to have a lifetime so that the borrow checker can check their validity when they are used in the various methods on that type
  - a method on custom type can return a reference that outlives the reference to self
- if custom type also implements Drop, then dropping your type counts as a use of any lifetime or type your type is generic over
  - when an instance of your type is dropped, the borrow checker will check that it’s still legal to use any of your type’s generic lifetimes before dropping it.
  - this is necessary in case your drop code does use any of those references.
  - If your type does not implement Drop, dropping the type does not count as a use,  and users are free to ignore any references stored in your type as long as they do not use it anymore

 - while a type can be generic over multiple lifetimes, making it so often only serves to unnecessarily complicate your type signature.
  - Usually, a type being generic over a single lifetime is fine, and the compiler will use the shorter of the lifetimes for any references inserted into your type as that one lifetime.
  - You should only really use multiple generic lifetime parameters if you have a type that contains multiple references, and its methods return references that should be tied to the lifetime of only one of those references.

** lifetime variance
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452724
:END:
- variance describes what types are subtypes of other types and when a subtype can be used in place of a supertype (and vice versa)
  - 'static is a subtype of 'a because a 'static lives at least as long as any 'a and so is more useful
  - more generally: if 'b: 'a ('b outlives 'a), then 'b is a subtype of 'a
- three kinds of variance: covariant, invariant, and contravariant.
  - covariant: if you can just use a subtype in place of the type
    For example, if a variable is of type &'a T, you can provide a value of type &'static T to it, because &'a T is covariant in 'a. &'a T is also covariant in T, so you can pass a &Vec<&'static str> to a function that takes &Vec<&'a str>.
  - invariant: which means that you must provide exactly the given type
    &mut T is an example of this—if a function takes a &mut Vec<&'a str>, you cannot pass it a &mut Vec<&'static str>. That is, &mut T is invariant in T. If you could, the function could put a short-lived string inside the Vec, which the caller would then continue using, thinking that it were a Vec<&'static str> and thus that the contained string were 'static! Any type that provides mutability is generally invariant for the same reason—for example, Cell<T> is invariant in T.
  - contravariance: comes up for function arguments - function types are more useful if they’re okay with their arguments being less useful.
    This is clearer if you contrast the variance of the argument types on their own with their variance when used as function arguments:
    #+begin_src rust
    let x: &'static str; // more useful, lives longer
    let x: &'a      str; // less useful, lives shorter

    fn take_func1(&'static str) // stricter, so less useful
    fn take_func2(&'a str)      // less strict, more useful
    #+end_src
- lifetime variance becomes relevant when you consider how generic lifetime parameters interact with the borrow checker


** Lifetimes
:PROPERTIES:
:CUSTOM_ID: lifetimes
:ANKI_NOTE_ID: 1644613452714
:END:
#+begin_src rust
&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime
#+end_src

*Every reference has a lifetime, which is a scope for which the reference is valid.*

- Lifetimes are variety of generics that give the compiler information about how references
  relate to each other.

- Lifetimes allow us to borrow values in many situations while still enabling the compiler to check that the references are valid.

- Most of times they are implicit and inferred. I must annotate lifetime when the lifetime of references could be related in a few different ways.

*** *lifetime elision and it's rules*
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452704
:END:
- The elision rules don't provide full inference.
- Lifetimes on function or method parameters are called *input lifetimes*
- Lifetimes on return values are called *output lifetimes*
- Rules apply to =fn= definitions as well as =impl= blocks.
- The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can't figure out lifetimes, the compiler will stop with an error.

**** *Rules*
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452696
:END:
1. each parameter that is a reference gets its own lifetime parameter.
   In other words, a function with one parameter gets one lifetime parameter: =fn foo<'a>(x: &'a i32)=; a function with two parameters gets two separate lifetime parameters: =fn foo<'a, 'b>(x: &'a i32, y: &'b i32)=; and so on.
2. if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: =fn foo<'a>(x: &'a i32) -> &'a i32=.
3. if there are multiple input lifetime parameters, but one of them is =&self= or =&mut self= because this is a method, the lifetime of =self= is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.

*** Basic example
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452690
:END:
the lifetime of the reference returned by the =longest= function is the same as the smaller of the lifetimes of the references passed in.
#+begin_src rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
#+end_src

*** in =struct= definition.
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452686
:END:
This annotation means an instance of  =ImportantExcerpt= can't outlive the reference it holds in its part field.
#+begin_src rust
struct ImportantExcerpt<'a> {
    part: &'a str,
}
#+end_src

*** in =method= definition.
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452682
:END:
#+begin_src rust
impl<'a> ImportantExcerpt<'a> {
    fn level(&self) -> i32 {
        3
    }
}
// or if you'd 'disable' 1st elision rule
impl<'a> ImportantExcerpt<'a> {
    fn level(&'a self) -> i32 {
        3
    }
}
#+end_src

*** another example with methods
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452679
:END:
#+begin_src rust
impl<'a> ImportantExcerpt<'a> {
    fn announce_and_return_part(&self, announcement: &str) -> &str {
        println!("Attention please: {}", announcement);
        self.part
    }
}
// or if you'd 'disable' 1st and 3rd elision rule
impl<'a> ImportantExcerpt<'a> {
    fn announce_and_return_part<'b>(&'a self, announcement: &'b str) -> &'a str {
        println!("Attention please: {}", announcement);
        self.part
    }
}
#+end_src

*** ='static= lifetime
:PROPERTIES:
:ANKI_NOTE_ID: 1644613452656
:END:
a reference that *can* live for entire duration of program. All string literals have ='static= lifetime.
#+begin_src rust
let s: &'static str = "I have a static lifetime.";zx
#+end_src
