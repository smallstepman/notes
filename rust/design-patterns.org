:PROPERTIES:
:ID:       9c7d3c71-5ca4-434f-9184-df486e4d3433
:END:
#+TITLE: Design Patterns

#+begin_src rust
use std::ops::Deref;

struct DerefExample<T> {
    value: T
}

impl<T> Deref for DerefExample<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

let x = DerefExample { value: 'a' };
assert_eq!('a', *x);
let y = DerefExample { value: 1 };
assert_eq!(1, *y);
#+end_src

#+begin_src rust
use std::ops::Add;

#[derive(Debug, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Point;

    fn add(self, other: Point) -> Point {
        Point {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }
}

assert_eq!(
    Point { x: 1, y: 0 } + Point { x: 2, y: 3 },
    Point { x: 3, y: 3 }
);
#+end_src

#+begin_src rust
let v: Vec<bool> = x.iter().filter(|v| match v { true => false, false => true} ).cloned().collect();
let x: Vec<bool> = vec![true,false,false];
println!("{:?}", v);
#+end_src
