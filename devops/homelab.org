:PROPERTIES:
:ID:       5113597f-6373-4296-af24-a05b277a8902
:END:
#+title: homelab

* Burn Ubuntu server onto SD cards, run it, ssh into it
- ubuntu server is 64bit, raspbian is 32bit, because of it, containers built for ARM64 will not work on raspbian
- ubuntu server by default has ssh enabled, all that is required to do is to enable DHCP server in my router, give my nodes a permanent IP address based on MAC Address and fire:
#+begin_src shell
sshpass "ubuntu" ssh ubuntu@192.168.1.101
#+end_src

* Networking
#+begin_src shell
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
#+end_src
* Download and install kubernetes tools
- add repository
#+begin_src shell
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
#+end_src
- install
#+begin_src shell
sudo apt-get install -y kubelet kubeadm kubectl
#+end_src
- make the packages un-uninstall
#+begin_src shell
sudo apt-mark hold kubelet kubeadm kubectl
#+end_src
The kubelet is now restarting every few seconds, as it waits in a crashloop for kubeadm to tell it what to do.
* Install container runtime
#+begin_src shell
sudo apt install -y docker.io
#+end_src
* enable cgroups
This allows Kubernetes to better manage resources used by the containers it runs and increases security by isolating containers from one another. It is required to change Cgroup driver to =systemd= to ensure there is only one cgroup manager in use. This helps with system stability and is recommended by Kubernetes.
#+begin_src shell :results raw :exports both
sudo docker info
#+end_src

#+RESULTS:
 Cgroup Driver:  cgroupfs
WARNING: No memory limit support
WARNING: No swap limit support
WARNING: No kernel memory TCP limit support
WARNING: No oom kill disable support
WARNING: No blkio weight support
WARNING: No blkio weight_device support


To do this, create or replace the /etc/docker/daemon.json file with:
#+begin_src shell
sudo cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
#+end_src
and enable cgroups limit support:
#+begin_src shell
sudo sed -i '$ s/$/ cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swapaccount=1/' /boot/firmware/cmdline.txt
#+end_src
=reboot= to take changes, and check =sudo docker info= again
* setting up Control Panel (primary node)
- [[id:bf2625f2-703a-4646-9299-e6f8213db340][???]] You also need to pick a network CIDR to use for the pods in the Kubernetes cluster. Setting the pod-network-cidr during the cluster creation ensures that the podCIDR value is set and can be used by the Container Network Interface (CNI) add-on later. This exercise uses the Flannel CNI. The CIDR you pick should not overlap with any CIDR currently used within your home network nor one managed by your router or DHCP server. Make sure to use a subnet that is larger than you expect to need: there are ALWAYS more pods than you initially plan for! In this example, I will use 10.244.0.0/16, but pick one that works for you.
#+begin_src shell
TOKEN=$(sudo kubeadm token generate)
echo $TOKEN
sudo kubeadm init --token=${TOKEN} --kubernetes-version=v1.18.2 --pod-network-cidr=10.244.0.0/16
#+end_src
#+begin_src
[WARNING SystemVerification]: missing optional cgroups: hugetlb
#+end_src
copy config from raspberry =/etc/kubernetes/admin.conf= to main pc =~/.kube/config=
***
