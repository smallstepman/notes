:PROPERTIES:
:ID:       a8742992-0a25-468e-a773-884c895443d1
:END:
#+TITLE: Search
#+created_at:<2021-04-05 Mon 18:31>
#+roam_tags: Empty
#+filetags: :project:

- *Search space* - the feasible region defining the set of all possible solutions

* COMMENT comparison table
| Worst-case performance      | =O(n)= |
| Best-case performance       | =O(n)= |
| Average performance         | =O(n)= |
| Worst-case space complexity | =O(n)= |

#+begin_src python :session
from typing import List

#+end_src

#+RESULTS:

* TOC :TOC@3:
- [[#linear-search][Linear search]]
- [[#binary-search][Binary search]]
    - [[#usecases-and-varieties][Usecases and varieties]]
  - [[#exercises][Exercises]]
    - [[#leetcode-4-median-of-two-sorted-arrays][Leetcode 4. Median of Two Sorted Arrays]]
    - [[#leetcode-33-search-in-rotated-sorted-array][Leetcode 33. Search in Rotated Sorted Array]]
    - [[#leetcode-34-find-first-and-last-position-of-element-in-sorted-array][Leetcode 34. Find First and Last Position of Element in Sorted Array]]
    - [[#leetcode-69-sqrtx][Leetcode 69. Sqrt(x)]]
    - [[#leetcode-153-find-minimum-in-rotated-sorted-array][Leetcode 153. Find Minimum in Rotated Sorted Array]]
    - [[#leetcode-162-find-peak-element][Leetcode 162. Find Peak Element]]
    - [[#leetcode-167-two-sum-ii---input-array-is-sorted][Leetcode 167. Two Sum II - Input array is sorted]]
    - [[#leetcode-278-first-bad-version][Leetcode 278. First Bad Version]]
    - [[#leetcode-287-find-the-duplicate-number][Leetcode 287. Find the Duplicate Number]]
    - [[#leetcode-367-valid-perfect-square][Leetcode 367. Valid Perfect Square]]
    - [[#leetcode-374-guess-number-higher-or-lower][Leetcode 374. Guess Number Higher or Lower]]
    - [[#leetcode-658-find-k-closest-elements][Leetcode 658. Find K Closest Elements]]
- [[#golden-section-search][Golden-section search]]
- [[#inbox][Inbox]]
- [[#connected][Connected]]
    - [[#leetcode--find-smallest-letter-greater-than-target][Leetcode . Find Smallest Letter Greater Than Target]]

* [[https://en.wikipedia.org/wiki/Linear_search][Linear search]]
* [[https://en.wikipedia.org/wiki/Binary_search_algorithm][Binary search]]
:PROPERTIES:
:ID:       dd5f1484-4f30-40e9-8df5-f2786877c6ac
:END:

#+begin_src python :session :results output :exports both
def search(self, nums: List[int], target: int) -> int:
    if len(nums) == 0:
        return -1

    l, r = 0, len(nums) - 1

    while l <= r:
        m = (l + r) // 2
        if nums[m] == target:
            return m
        elif nums[m] < target:
            l = m + 1
        else:
            r = m - 1

    return -1


print(search([1, 2, 3, 4], 3))
print(search([1, 2, 3, 4], -3))
#+end_src

#+RESULTS:
: 2
: -1


| Worst-case performance      | =O(log n)= |
| Best-case performance       | =O(1)=     |
| Average performance         | =O(log n)= |
| Worst-case space complexity | =O(1)=     |
- finds the position of a target value within a sorted array
- faster than linear search, unless array is small
- also known as
  - half-interval search
  - logarithmic search
  - binary chop
- Binary Search operates on a contiguous sequence with a specified left and right index.
- Binary Search maintains the left, right, and middle indicies of the search space and compares the search target or applies the search condition to the middle value of the collection;
  - if the condition is unsatisfied or values unequal, the half in which the target cannot lie is eliminated and the search continues on the remaining half until it is successful.
  - If the search ends with an empty half, the condition cannot be fulfilled and target is not found.
- can be also used to find solution to next-smallest or next-largest element relative to =target= (even when =target= is absent from the array)
- prone to arithmetic overflow error for very large arrays (value of L + R can exceed the range of integers of the data type used to store the midpoint)
*** Usecases and varieties
- [[https://en.wikipedia.org/wiki/Bisection_method][Bisection method]] is an algorithm for finding a zero of a function â€“ the same idea used to solve equations in the real numbers, aka: root-finding method. Is used in software development to identify change sets that result in a specific behavior change. It is mostly employed for finding the patch that introduced a bug. Another application area is finding the patch that indirectly fixed a bug.
- Exponential search extends binary search to unbounded lists :04/12/2021 17:08
- Interpolation search estimates the position of the target value, taking into account the lowest and highest elements in the array as well as length of the array.
- Fractional cascading is a technique that speeds up binary searches for the same element in multiple sorted arrays.
- Multiplicative binary search is a variation of binary search that uses a specific permutation of keys in an array instead of the sorted order used by regular binary search. On modern hardware, the cache-friendly nature of multiplicative binary search makes it suitable for out-of-core search on block-oriented storage as an alternative to B-trees and B+ trees. For optimal performance, the branching factor of a B-tree or B+-tree must match the block size of the file system that it is stored on. The permutation used by multiplicative binary search places the optimal number of keys in the first (root) block, regardless of block size. Multiplicative binary search is used by some optimizing compilers to implement switch statements.

** Exercises
*** [[https://leetcode.com/problems/median-of-two-sorted-arrays/solution/][Leetcode 4. Median of Two Sorted Arrays]]
#+begin_quote
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
#+end_quote
naive =O(nlogn)= approach
#+begin_src python :session :results output :exports both
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        def median(seq):
            l = len(seq)
            if l % 2 == 0:
                return (seq[l // 2] + seq[(l - 1) // 2]) / 2
            else:
                return seq[l // 2]

        return median(sorted(nums1 + nums2))
#+end_src
**** TODO COMMENT O(log(n+m)) approach
- https://medium.com/@hazemu/finding-the-median-of-2-sorted-arrays-in-logarithmic-time-1d3f2ecbeb46
- https://leetcode.com/problems/median-of-two-sorted-arrays/solution/
*** TODO [[https://leetcode.com/problems/search-in-rotated-sorted-array/][Leetcode 33. Search in Rotated Sorted Array]]
#+begin_quote
Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if len(nums) == 1:
            return 0 if nums[0] == target else -1

        l, r = 0, len(nums)

        while l < r:
            m = (l+r)//2
            if target < nums[0] < nums[m]:
                l = m+1
            elif target >= nums[0] > nums[m]:
                r = m
            elif nums[m] < target:
                l = m+1
            elif nums[m] > target:
                r = m
            else:
                return m

        return -1



print(Solution().search([10,1,2,3,4,5,6,7,8,9], 8 ))
print(Solution().search([10,1,2,3,4,5,6,7,8,9], 0 ))
print(Solution().search([10,1,2,3,4,5,6,7,8,9], 4 ))
print(Solution().search([10,1,2,3,4,5,6,7,8,9], 5 ))
print(Solution().search([2,3,4,5,6,7,8,9,10,1], 3 ))
print(Solution().search([6,7,8,9,10,1,2,3,4,5], 0 ))
print(Solution().search([2,3,4,5,6,7,8,9,10,1], 0 ))
print(Solution().search([6,7,8,9,10,1,2,3,4,5], 7 ))
print(Solution().search([6,7,8,9,10,1,2,3,4,5], 4 ))
print(Solution().search([10,1,2,3,4,5,6,7,8,9], 1 ))
print(Solution().search([10,1,2,3,4,5,6,7,8,9], 11))
print(Solution().search([2,3,4,5,6,7,8,9,10,1], 10))
print(Solution().search([2,3,4,5,6,7,8,9,10,1], 11))
print(Solution().search([6,7,8,9,10,1,2,3,4,5], 11))

#+end_src

#+RESULTS:
#+begin_example
8
-1
4
5
1
-1
-1
1
8
1
-1
8
-1
-1
#+end_example
*** [[https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/][Leetcode 34. Find First and Last Position of Element in Sorted Array]]
#+begin_quote
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def findBound(nums: List[int], target: int, start=True) -> int:
            l, r = 0, len(nums) - 1

            while l <= r:
                m = int((l + r) / 2)

                if nums[m] == target:
                    if start:
                        if m == l or nums[m - 1] < target:
                            return m
                        r = m - 1
                    else:
                        if m == r or nums[m + 1] > target:
                            return m
                        l = m + 1
                elif nums[m] >= target:
                    r = m - 1
                elif nums[m] <= target:
                    l = m + 1

            return -1

        if not nums or (s := findBound(nums, target)) == -1:
            return [-1, -1]
        else:
            return [s, findBound(nums, target, start=False)]


print(Solution().searchRange([6, 7, 8, 9, 10, 11], 11))
print(Solution().searchRange([6, 7, 8, 9, 11, 11], 11))
print(Solution().searchRange([6, 7, 8, 9, 10, 12], 11))
print(Solution().searchRange([1, 1, 1, 12], 1))
print(Solution().searchRange([6, 7, 8, 9, 10, 12, 12, 12, 12], 12))
print(Solution().searchRange([], 12))
print(Solution().searchRange([12], 12))
print(Solution().searchRange([11], 12))
print(Solution().searchRange([1, 1, 1, 1], 1))
#+end_src

#+RESULTS:
: [5, 5]
: [4, 5]
: [-1, -1]
: [0, 2]
: [5, 8]
: [-1, -1]
: [0, 0]
: [-1, -1]
: [0, 3]

*** [[https://leetcode.com/problems/sqrtx/][Leetcode 69. Sqrt(x)]]
#+begin_quote
Given a non-negative integer x, compute and return the square root of x.
#+end_quote

it's a [[id:fc48f797-b737-47b0-baeb-1694b7dbfd8f][Math]] problem, but solved using binary search
#+begin_src python :session :results output :exports both
class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return x

        l, r = 1, x

        while l <= r:
            mid = (l + r) // 2
            if mid ** 2 <= x and (mid + 1) ** 2 > x:
                return mid
            elif mid ** 2 > x:
                r = mid - 1
            else:
                l = mid + 1

        return mid - 1

print(Solution().mySqrt(10))
print(Solution().mySqrt(15))
print(Solution().mySqrt(16))
#+end_src

#+RESULTS:
: 3
: 3
: 4
*** [[https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/][Leetcode 153. Find Minimum in Rotated Sorted Array]]
#+begin_quote

#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]

        l, r = 0, len(nums) - 1

        while l <= r:
            m = (l+r)//2
            if nums[m-1] > nums[m] < nums[m+1 if m+1 != len(nums) else 0]:
                return nums[m]
            elif  nums[l] > nums[m] or nums[l] < nums[m] < nums[r]:
                r = m
            elif nums[m] > nums[r]:
                l = m + 1

print(Solution().findMin([3,4,5,1,2]))
print(Solution().findMin([3]))
print(Solution().findMin([1,2,3,4]))
print(Solution().findMin([2,3,4,1]))
print(Solution().findMin([4,1,2,3]))
#+end_src

#+RESULTS:
: 1
: 3
: 1
: 1
: 1
**** TODO COMMENT [[https://leetcode.com/submissions/detail/479945660/?from=explore&item_id=949][Do it faster]]
- check if =nums[l] < nums[r]=, if yes, return nums[l]
- =m = l + (r - l) // 2=
- simplify if statement
#+begin_src python
if nums[m] > nums[l]:
    l = m
elif nums[m] < nums[l]:
    r = m
else:
    return nums[r]
#+end_src
*** [[https://leetcode.com/problems/find-peak-element/][Leetcode 162. Find Peak Element]]
#+begin_quote
Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
#+end_quote
=O(logn)= solution
#+begin_src python :session :results output :exports both
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 0
        elif len(nums) == 2:
            return nums.index(max(nums))

        l, r = 0, len(nums) - 1
        while l < r:
            m = (l + r) // 2

            if nums[m - 1] < nums[m] > nums[m + 1]:
                return m
            elif nums[m] > nums[m + 1] or nums[m] < nums[m - 1]:
                r = m
            elif nums[m] > nums[m - 1]:
                l = m + 1

        return l

print(Solution().findPeakElement([1, 2]))
print(Solution().findPeakElement([2, 1]))
print(Solution().findPeakElement([3, 1, 2]))
print(Solution().findPeakElement([1, 2, 3]))
print(Solution().findPeakElement([3, 2, 1]))
print(Solution().findPeakElement([1, 2, 1, 3, 1]))
print(Solution().findPeakElement([1, 2, 3, 4, 3]))
#+end_src

#+RESULTS:
: 1
: 0
: 0
: 2
: 0
: 1
: 3

=O(n)= solution
#+begin_src python :session :results output :exports both
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        return nums.index(max(nums))

print(Solution().findPeakElement([1, 2]))
print(Solution().findPeakElement([2, 1]))
print(Solution().findPeakElement([3, 1, 2]))
print(Solution().findPeakElement([1, 2, 3]))
print(Solution().findPeakElement([3, 2, 1]))
print(Solution().findPeakElement([1, 2, 1, 3, 1]))
print(Solution().findPeakElement([1, 2, 3, 4, 3]))
#+end_src

#+RESULTS:
: 1
: 0
: 0
: 2
: 0
: 3
: 3
**** COMMENT it was hard
for the life of me, I couldn't figure this out, it's like my brain was stuck. I probably submitted around 6 wrong/TLE answers before I started really thinking. I'm still not sure if that's the best approach (especially =len(nums) == 2= at the top
*** [[https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/][Leetcode 167. Two Sum II - Input array is sorted]]
#+begin_quote
Given an array of integers numbers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l,r=0,len(numbers)-1
        while l < r:
            if numbers[l] + numbers[r] == target:
                return [l+1,r+1]
            elif numbers[l] + numbers[r] > target:
                r -= 1
            else:
                l += 1
#+end_src
*** [[https://leetcode.com/problems/first-bad-version/][Leetcode 278. First Bad Version]]
#+begin_quote
You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
#+end_quote
#+begin_src python :session :results output :exports both
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):


def isBadVersion(version):
    return 4 == version


class Solution:
    def firstBadVersion(self, n):
        left, right = 1, n
        while left < right:
            mid = (left + right) // 2
            if isBadVersion(mid):
                right = mid
            elif not isBadVersion(mid):
                left = mid + 1

        return left


print(Solution().firstBadVersion(10))
#+end_src

#+RESULTS:
: 4

or using *bisection method*
#+begin_src python :session :results output :exports both
import bisect

class Solution:
    def firstBadVersion(self, n):
        class Wrap:
            def __getitem__(self, i):
                return isBadVersion(i)
        return bisect.bisect(Wrap(), False, 0, n)

print(Solution().firstBadVersion(21))
#+end_src

#+RESULTS:
: 4

*** [[https://leetcode.com/problems/find-the-duplicate-number/][Leetcode 287. Find the Duplicate Number]]
#+begin_quote
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number.
#+end_quote
if elements are sorted (=O(nlogn)= time, =O(1)= space), then duplicates will be adjenct
#+begin_src python :session :results output :exports both
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        nums.sort()
        for i,n in enumerate(nums):
            if n == nums[i+1]:
                return n

#+end_src

better idea (=O(n)= time, =O(n)= space) is to use set
#+begin_src python :session :results output :exports both
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        s = set()
        for n in nums:
            if n in s:
                return n
            s.add(n)
#+end_src

**** TODO COMMENT Floyd's Tortoise and Hare (Cycle Detection)

*** [[https://leetcode.com/problems/valid-perfect-square/][Leetcode 367. Valid Perfect Square]]
#+begin_quote
Given a positive integer num, write a function which returns True if num is a perfect square else False. Don't use built-it libs.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        l, r = 1, num

        while l <= r:
            mid = (l + r) // 2
            if mid ** 2 <= num and (mid + 1) ** 2 > num:
                return mid*mid == num
            elif mid ** 2 > num:
                r = mid - 1
            else:
                l = mid + 1

print(Solution().isPerfectSquare(21))
print(Solution().isPerfectSquare(1))
print(Solution().isPerfectSquare(16))
#+end_src

#+RESULTS:
: False
: True
: True

*** [[https://leetcode.com/problems/guess-number-higher-or-lower/][Leetcode 374. Guess Number Higher or Lower]]
#+begin_src python :session :results output :exports both
# The guess API is already defined for you.
# @param num, your guess
# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0
# def guess(num: int) -> int:

class Solution:
    def guessNumber(self, n: int) -> int:
        l, r = 1, n
        m = (l+r)//2
        while (match := guess(m)) != 0:
            if match == 1:
                l = m + 1
            else:
                r = m - 1
            m = (l+r)//2
        return m
#+end_src
or with random choice
#+begin_src python
class Solution:
    def guessNumber(self, n: int) -> int:
        l, r = 1, n
        while (m := random.randint(l, r)):
            if guess(m) == 1:
                l = m + 1
            elif guess(m) == -1:
                r = m - 1
            else:
                return m
#+end_src
*** TODO COMMENT [[https://leetcode.com/problems/split-array-largest-sum/][Leetcode 410. Split Array Largest Sum]]
#+begin_quote
Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def splitArray(self, nums: List[int], m: int) -> int:
        l, r = max(nums), sum(nums)
        while l < r:
            mid = (l + r) // 2
            count, cur = 1, 0
            for num in nums:
                cur += num
                if cur > mid:
                    cur = num
                    count += 1
            if count > m:
                l = mid + 1
            else:
                r = mid
        return l
#+end_src
*** [[https://leetcode.com/problems/find-k-closest-elements/][Leetcode 658. Find K Closest Elements]]
#+begin_quote
Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        if len(arr) == 1:
            return arr

        # find target
        l, r = 0, len(arr) - 1
        while l < r:
            m = (l + r) // 2
            if arr[m] == x or arr[m - 1] <= x >= arr[m + 1]:
                break
            elif arr[m] > x:
                r = m
            elif arr[m] < x:
                l = m + 1
        # find k closest distance
        result = [arr[m]]
        for _ in range(k - 1):
            if m - 1 >= 0 and m + 1 <= len(arr) - 1:
                if abs(arr[m] - arr[m - 1]) <= abs(arr[m + 1] - arr[m]):
                    result.append(arr.pop(m - 1))
                    m -= 1
                elif abs(arr[m] - arr[m - 1]) > abs(arr[m + 1] - arr[m]):
                    result.append(arr.pop(m + 1))
            elif m + 1 > len(arr) - 1:
                result.append(arr.pop(m - 1))
                m -= 1
            elif m - 1 < 0:
                result.append(arr.pop(m + 1))

        return sorted(result)


print(Solution().findClosestElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 4))
#+end_src
or with built-in libs
#+begin_src python :session :results output :exports both
import bisect
import collections
class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        if len(arr) == 1:
            return arr
        m = bisect(arr, x)
        left, right = m, m+1
        result = collections.deque()

#+end_src
or shorter better quicker
#+begin_src python :session :results output :exports both
class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        l, r = k, len(arr)
        while l < r:
            m = (l + r) // 2
            print(m, x, arr[m], arr[m - k])
            if (arr[m] - x) >= (x - arr[m - k]):
                r = m
            else:
                l = m + 1
        return arr[l - k : r]


print(Solution().findClosestElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 4))
#+end_src

#+RESULTS:
: 5 4 6 5
: 3 4 4 3
: 4 4 5 4
: [4]
*** TODO COMMENT [[https://leetcode.com/problems/find-k-th-smallest-pair-distance/][Leetcode 719. Find K-th Smallest Pair Distance]]
#+begin_quote
Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.
#+end_quote
#+begin_src python :session :results output :exports both
class Solution(object):
    def smallestDistancePair(self, nums, k):
        def possible(guess):
            #Is there k or more pairs with distance <= guess?
            count = left = 0
            for right, x in enumerate(nums):
                while x - nums[left] > guess:
                    left += 1
                count += right - left
            return count >= k

        nums.sort()
        lo = 0
        hi = nums[-1] - nums[0]
        while lo < hi:
            mi = (lo + hi) / 2
            if possible(mi):
                hi = mi
            else:
                lo = mi + 1

        return int(lo)
#+end_src
* [[https://en.wikipedia.org/wiki/Golden-section_search][Golden-section search]]
:PROPERTIES:
:ID:       da764636-ac66-484e-a9ac-59c50a3794d7
:END:
technique for finding an extremum (minimum or maximum) of a function inside a specified interval

* Inbox

* Connected


*** [[][Leetcode . Find Smallest Letter Greater Than Target]]
#+begin_quote
Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target. Letters also wrap around.
#+end_quote

#+begin_src python :session :results output :exports both
import bisect
class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        m = bisect.bisect(letters, target)
        return letters[m % len(letters)]


print(Solution().nextGreatestLetter(["a", "c", "d"], "a"))
print(Solution().nextGreatestLetter(["a", "c", "d"], "b"))
print(Solution().nextGreatestLetter(["a", "c", "d"], "f"))
print(Solution().nextGreatestLetter(["b", "c", "d"], "a"))
print(Solution().nextGreatestLetter(["b"], "a"))
print(Solution().nextGreatestLetter(["b"], "c"))
print(Solution().nextGreatestLetter(["b"], "b"))
#+end_src

#+RESULTS:
: c
: c
: a
: b
: b
: b
: b

