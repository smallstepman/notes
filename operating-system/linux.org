:PROPERTIES:
:ID:       98d61c90-2d7f-4b5b-8b52-b5d7c1dea7e9
:END:
#+TITLE: Linux
#+roam_tags: Technology

* elf file
- executable linkable format
* cgroups
- abbreviated from control groups
- a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes

* POSIX
Portable Operating System Interface for Unix
* IPC - Interprocess Communications
allows a process to communicate with another process
** types
- between related processes (parent =<->= child)
- between unrelated processes (one or more different processes)
** variants
*** pipes
**** unnamed pipes =|=
- half-duplex (W/R but only in one direction)
#+begin_src shell :exports both
cat linux.org | wc
#+end_src

#+RESULTS:
: 1190    6291   39237

**** named pipes =mkfifo mypipe=
- also called First In, First Out
- creates intermediatary file
#+begin_src shell :exports both
mkfifo mypipe
cat linux.org > mypipe
# open another terminal and execute:
wc mypipe
#+end_src

#+RESULTS:
: 1190    6291   39237
*** shared memory
- full-duplex (R/W both directions)
- most efficient
- requirest a program to facilitate it - in the end, both programmes are using same memory block
- can share memory between any number of processes
- processes must manage shared memory
- processes must protect ([[id:7a8631bd-9a44-4227-b39c-0ae3ac932399][synchronize]]) shared memory being written  (or [[id:7f8e2ebc-9522-4a40-b342-d5c3030abf0a][Race condition]] occurs)
#+begin_src shell :exports both :colnames '("key" "shmid" "owner" "perms" "bytes" "nattch" "status")
ipcs -m | tail -n +4
#+end_src

#+RESULTS:
|        key |  shmid | owner    | perms |   bytes | nattch | status |
|------------+--------+----------+-------+---------+--------+--------|
| 0x022246b2 |      0 | postgres |   600 |      56 |      6 |        |
| 0x00000000 | 131081 | marcin   |   600 | 4194304 |      2 | dest   |
| 0x00000000 | 131084 | marcin   |   600 |  524288 |      2 | dest   |
| 0x00000000 | 131094 | marcin   |   600 |    5184 |      2 | dest   |
| 0x00000000 | 131095 | marcin   |   600 | 1048576 |      2 | dest   |
|            |        |          |       |         |        |        |
*** message queues
- FIFO queue
- created by syscall
- once message is read, it's deleted from the queue
- each read and write creates a [[id:1cf0e378-de72-481b-86ba-deef0a1dc09b][syscall]] to kernel
- no risk of [[id:7f8e2ebc-9522-4a40-b342-d5c3030abf0a][Race condition]], but worse performance than Shared Memory, due to [[id:1cf0e378-de72-481b-86ba-deef0a1dc09b][syscall]] interrupt(trap)
- multiple processes can write into msg queue, as well as many processes can read out of it
*** semaphores
- requires program to use it
- atomic piece of operating system, ?lowest piece of OS?
- protects critical regions of memory shared betewen multiple processes
- when a process "allocates" (accesses) a semaphore, it waits(blocks) the other processes from access until the first process issues a "release" indicating it has completed its operation
***** types
- binary - only two states (0/1)
- counting semaphores - allow arbitrary resource counters
*** signals
- E.g. Ctrl+C, aka SIGINT
- used as notification, event notification
- also known as trap, or software interrupt
- list of all signals implemented by my kernel
#+begin_src shell :exports both
kill -l
#+end_src

#+RESULTS:
| HUP   | INT    | QUIT | ILL | TRAP | ABRT  | IOT       | BUS       | FPE  | KILL | USR1 | SEGV | USR2   | PIPE | ALRM |
| TERM  | STKFLT | CHLD | CLD | CONT | STOP  | TSTP      | TTIN      | TTOU | URG  | XCPU | XFSZ | VTALRM | PROF |      |
| WINCH | IO     | POLL | PWR | SYS  | RT<N> | RTMIN+<N> | RTMAX-<N> |      |      |      |      |        |      |      |

- signals can be generated by a user, or process, or the kernel
**** types
***** ??? numeric 9-15, so called "process crash-out"
will immediately cause termination of porcess and can not be blocked.
* [[id:fd722d95-80c0-4801-8d70-6b0cc8b227fc][memory management]]

- Linux has to allocate memory for each process
** =size= - check how much size a binary needs
  #+begin_src shell :exports both
  size /usr/bin/emacs
  #+end_src

  #+RESULTS:
  |     text |    data |    bss |      dec | hex     | filename       |
  | 37545618 | 4637768 | 783760 | 42967146 | 28fa06a | /usr/bin/emacs |
- compiler, when building a binary, has to determine how much disk??? memory it needs to allocate segments
  + text - code, executable statements of the program
  + data - read only variables, which have been declared
  + bss - dynamic variables, arrays
  + dec - total in decimal
  + hex - total in hex
** virtual memory
- mapping between logical and physical
* [[id:1cf0e378-de72-481b-86ba-deef0a1dc09b][system calls]]
* kernel
:logbook:
clock: [2021-03-25 thu 19:07]
:end:





* [[id:2a3a3ebc-ebde-4940-8842-fd05ac4936b2][Resources]]
** r/linux4noobs
** yt chris titus tech
** urban penguin
** https://www.youtube.com/watch?v=BKkX9WASfpI
